// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package repository

import (
	"context"
)

const usersCreate = `-- name: UsersCreate :one
INSERT INTO users (username, email)
VALUES (?1, ?2)
RETURNING id, username, email, created_at
`

type UsersCreateParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) UsersCreate(ctx context.Context, arg UsersCreateParams) (User, error) {
	row := q.db.QueryRowContext(ctx, usersCreate, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const usersGetAll = `-- name: UsersGetAll :many
SELECT id, username, email, created_at from users
`

func (q *Queries) UsersGetAll(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, usersGetAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
