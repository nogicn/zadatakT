basePath: /
definitions:
  backendT_internal_database_repository.Log:
    properties:
      bytes_in:
        $ref: '#/definitions/sql.NullInt64'
      bytes_out:
        $ref: '#/definitions/sql.NullInt64'
      error:
        $ref: '#/definitions/sql.NullString'
      host:
        $ref: '#/definitions/sql.NullString'
      id:
        type: integer
      latency:
        $ref: '#/definitions/sql.NullInt64'
      latency_human:
        $ref: '#/definitions/sql.NullString'
      method:
        $ref: '#/definitions/sql.NullString'
      remote_ip:
        $ref: '#/definitions/sql.NullString'
      request_id:
        $ref: '#/definitions/sql.NullString'
      status:
        $ref: '#/definitions/sql.NullInt64'
      timestamp:
        $ref: '#/definitions/sql.NullTime'
      uri:
        $ref: '#/definitions/sql.NullString'
      user_agent:
        $ref: '#/definitions/sql.NullString'
    type: object
  backendT_internal_database_repository.LogsGetBasicViewWithOffsetLimitAdvancedRow:
    properties:
      created_at:
        $ref: '#/definitions/sql.NullTime'
      method:
        $ref: '#/definitions/sql.NullString'
      path:
        $ref: '#/definitions/sql.NullString'
      response:
        $ref: '#/definitions/sql.NullInt64'
      response_time:
        $ref: '#/definitions/sql.NullString'
    type: object
  backendT_internal_database_repository.LogsGetBasicViewWithOffsetLimitRow:
    properties:
      created_at:
        $ref: '#/definitions/sql.NullTime'
      method:
        $ref: '#/definitions/sql.NullString'
      path:
        $ref: '#/definitions/sql.NullString'
      response:
        $ref: '#/definitions/sql.NullInt64'
      response_time:
        $ref: '#/definitions/sql.NullString'
    type: object
  backendT_internal_database_repository.Post:
    properties:
      content:
        type: string
      created_at:
        $ref: '#/definitions/sql.NullTime'
      id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  backendT_internal_database_repository.PostsCreateParams:
    properties:
      content:
        type: string
      title:
        type: string
      user_id:
        type: integer
    type: object
  backendT_internal_database_repository.User:
    properties:
      created_at:
        $ref: '#/definitions/sql.NullTime'
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  backendT_internal_database_repository.UsersCreateParams:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  sql.NullInt64:
    properties:
      int64:
        format: int64
        type: integer
      valid:
        description: Valid is true if Int64 is not NULL
        type: boolean
    type: object
  sql.NullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  sql.NullTime:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: Your API Description
  title: Your API Name
  version: "1.0"
paths:
  /logs:
    get:
      description: Returns a list of all logs from the database.
      produces:
      - application/json
      responses:
        "200":
          description: List of logs
          schema:
            items:
              $ref: '#/definitions/backendT_internal_database_repository.Log'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all logs
      tags:
      - logs
  /logs/filtered:
    get:
      description: Returns filtered logs based on method, response type and time range.
        Requires limit, offset and timeRange parameters.
      parameters:
      - description: HTTP method to filter by
        in: query
        name: method
        type: string
      - description: Response status code to filter by
        in: query
        name: response
        type: integer
      - description: Time range (e.g. '-1 hour', '-24 hours', '-7 days'). Required
          parameter.
        in: query
        name: timeRange
        required: true
        type: string
      - description: Offset for pagination. Required parameter.
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit for pagination. Required parameter.
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/backendT_internal_database_repository.LogsGetBasicViewWithOffsetLimitAdvancedRow'
            type: array
        "400":
          description: Invalid parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get filtered logs
      tags:
      - logs
  /logs/paginated:
    get:
      description: Returns a paginated list of logs with basic view
      parameters:
      - description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Limit for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/backendT_internal_database_repository.LogsGetBasicViewWithOffsetLimitRow'
            type: array
        "400":
          description: Invalid parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get paginated logs without filters
      tags:
      - logs
  /posts:
    get:
      description: Returns a list of all posts from the database.
      produces:
      - application/json
      responses:
        "200":
          description: List of posts
          schema:
            items:
              $ref: '#/definitions/backendT_internal_database_repository.Post'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Creates a new post in the database. Expects a JSON body with the
        required fields.
      parameters:
      - description: New post payload
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/backendT_internal_database_repository.PostsCreateParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created post
          schema:
            $ref: '#/definitions/backendT_internal_database_repository.Post'
        "400":
          description: Bad request - invalid payload
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new post
      tags:
      - posts
  /posts/id/{id}:
    get:
      description: Fetches a single post by numeric ID.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Found post
          schema:
            $ref: '#/definitions/backendT_internal_database_repository.Post'
        "400":
          description: Bad request - invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get post by ID
      tags:
      - posts
  /posts/userid/{userid}:
    get:
      description: Fetches a single post by its user ID.
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Found post
          schema:
            $ref: '#/definitions/backendT_internal_database_repository.Post'
        "400":
          description: Bad request - invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get post by user ID
      tags:
      - posts
  /users:
    get:
      description: Returns a list of all users from the database.
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/backendT_internal_database_repository.User'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user in the database. Expects a JSON body with the
        required fields.
      parameters:
      - description: New user payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/backendT_internal_database_repository.UsersCreateParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created user
          schema:
            $ref: '#/definitions/backendT_internal_database_repository.User'
        "400":
          description: Bad request - invalid payload
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /users/email/{email}:
    get:
      description: Fetches a single user by their email address.
      parameters:
      - description: Email address
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Found user
          schema:
            $ref: '#/definitions/backendT_internal_database_repository.User'
        "400":
          description: Bad request - invalid email
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by email
      tags:
      - users
  /users/id/{id}:
    get:
      description: Fetches a single user by numeric ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Found user
          schema:
            $ref: '#/definitions/backendT_internal_database_repository.User'
        "400":
          description: Bad request - invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by ID
      tags:
      - users
  /users/username/{username}:
    get:
      description: Fetches a single user by their username.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Found user
          schema:
            $ref: '#/definitions/backendT_internal_database_repository.User'
        "400":
          description: Bad request - invalid username
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by username
      tags:
      - users
swagger: "2.0"
